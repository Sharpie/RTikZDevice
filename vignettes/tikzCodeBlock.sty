% Looking to make a nice code container- similar to that found
% at http://code.google.com/p/syntaxhighlighter/
% To do so, we need a customized shape that can have several
% different background colors.

% Code blocks should also break across pages, so we need some
% additional TeX voodoo.

% Building this I have finally started to learn what the hell
% \makeatletter does- it shifts the character @ into 'user land'
% so you can define macros with @ in their names. This way if a 
% user comes along and \newcommands the a macro with the same
% name the two don't clash since they won't be using the @ character
% anywhere. It's basically the LaTeX version of namespacing.

\ProvidesPackage{tikzCodeBlock}

\RequirePackage{tikz}
\usetikzlibrary{positioning}
\RequirePackage{listings}
\RequirePackage{verbatim}


% We start off defining a new node shape to hold our code chunks.
% It has a couple of extra options when it comes to background color
% and such.

% Shape 'code node'
%
% Inherits everything from rectangle except the behind background path.
%
% Adapted from Texample:
%		http://www.texample.net/tikz/examples/rectangle-node-with-diagonal-fill/
%
% Contributed by Mark Wibrow- the guy who designed the PGF math engine
% and made most of the stock node shapes.
%
\pgfdeclareshape{code node}
{
    % This bit from \pgflibarayshapes.code.tex
    \inheritsavedanchors[from=rectangle]
    \inheritanchorborder[from=rectangle]
    \inheritanchor[from=rectangle]{north}
    \inheritanchor[from=rectangle]{north west}
    \inheritanchor[from=rectangle]{north east}
    \inheritanchor[from=rectangle]{center}
    \inheritanchor[from=rectangle]{west}
    \inheritanchor[from=rectangle]{east}
    \inheritanchor[from=rectangle]{mid}
    \inheritanchor[from=rectangle]{mid west}
    \inheritanchor[from=rectangle]{mid east}
    \inheritanchor[from=rectangle]{base}
    \inheritanchor[from=rectangle]{base west}
    \inheritanchor[from=rectangle]{base east}
    \inheritanchor[from=rectangle]{south}
    \inheritanchor[from=rectangle]{south west}
    \inheritanchor[from=rectangle]{south east}

    \inheritbackgroundpath[from=rectangle]
    \inheritbeforebackgroundpath[from=rectangle]
    \inheritbehindforegroundpath[from=rectangle]
    \inheritforegroundpath[from=rectangle]
    \inheritbeforeforegroundpath[from=rectangle]
    
   % Now do the background filling.
    \behindbackgroundpath{%
        % \southwest and \northeast defined by rectangle, but
        % (somewhat annoyingly) not \southeast and \northwest
        % so use this workaround.
        \pgfextractx{\pgf@xa}{\southwest}%
        \pgfextracty{\pgf@ya}{\southwest}%
        \pgfextractx{\pgf@xb}{\northeast}%
        \pgfextracty{\pgf@yb}{\northeast}%
		
		% New code here. We want to draw a bar 4 ex wide to lie
		% under the line numbers. So we define two points that 
		% are 7 ex to the left of the southwest and northwest corners.
		\def\pgf@numberstripe@southwest{%
			\pgfpointadd{\southwest}%
			{\pgfpoint{\pgf@codestripe@width}{0}}%
		}
		\def\pgf@numberstripe@northwest{%
			\pgfpointadd{\pgfpoint{\pgf@xa}{\pgf@yb}}%
			{\pgfpoint{\pgf@codestripe@width}{0}}%
		}
		% Now we draw the code bar.
		\pgfpathmoveto{\southwest}%
		\pgfpathlineto{\pgf@numberstripe@southwest}%
		\pgfpathlineto{\pgf@numberstripe@northwest}%
		\pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yb}}%
		\pgfpathclose		
		% Now fill it with a nice light grey.
		\color{\pgf@codestripe@color}%
		\pgfusepath{fill}%
		% Now for the rest of the node.
		\pgfpathmoveto{\pgf@numberstripe@southwest}%
		\pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@ya}}%
		\pgfpathlineto{\northeast}%
		\pgfpathlineto{\pgf@numberstripe@northwest}%
		\pgfpathclose
		%
		\color{\pgf@codebody@color}%
		\pgfusepath{fill}
    }
}

%---------------------  Begin  User Level Shape Options -----------------

% Default widths.
\def\pgf@codestripe@width{0pt}

% Default color values
\def\pgf@codebody@color{white}
\def\pgf@codestripe@color{gray!30}

% Use these with PGF
\def\pgfsetcodestripecolor#1{\def\pgf@codestripe@color{#1}}%
\def\pgfsetcodestripewidth#1{\def\pgf@codestripe@width{#1}}%
\def\pgfsetcodebodycolor#1{\def\pgf@codebody@color{#1}}%

% Use these with TikZ
\tikzoption{codestripe color}{\pgfsetcodestripecolor{#1}}
\tikzoption{codestripe width}{\pgfsetcodestripewidth{#1}}
\tikzoption{codebody color}{\pgfsetcodebodycolor{#1}}

%--------------------- End User Level Shape Options -------------------

%===============================================

%--------------------- Begin Internal Package Variables ----------------

% All package variables, macros and styles shall start with
% tikzCode

% This variable will be used to hold the amount of free space
% remaining on the page.
\newlength\tikzCode@pageFree

% codeHeap holds large amounts of source code, processed
% by listings and which may be too big to fit on a single page.
% codeChunk holds small bite-sized pieces pulled off of the
% codeHeap which are big enough to fit in the space available
% on the page.
\newbox\tikzCode@codeHeap
\newbox\tikzCode@codeChunk

% These conditionals are used to ensure things like code chunk
% titles and footers are only printed on the first and last chunks.
\newif\iftikzCode@heapStart
\newif\iftikzCode@heapEnd

% This conditional controls the execution of the page breaking
% algorithm implemented by this package. It is enabled by default.
\newif\iftikzCode@breakPages
\tikzCode@breakPagestrue
\def\tikzCode@true{true}

% Since listings does not like to work inside defined environments,
% all source code enclosed in the tikzCodeBlock environment will
% be stashed in a temporary file and parsed back in using: 
%    \lstinputlisting
%
% Which has no problem with being embedded inside another
% enviornment or macro.
\newwrite\tikzCode@tempFile 

%--------------------- End Internal Package Variables ------------------

%--------------------- Begin Internal Package Macros ------------------

\newcommand\tikzCode@setupKeys{%
	% This command leverages the pgfkeys package,
	% included by tikz, to set up handling for options
	% of the form [key=value]
	\pgfkeys{/tikzCode/title/.store in=\tikzCode@codeNodeTitle,
		/tikzCode/footer/.store in=\tikzCode@codeNodeFooter,
		/tikzCode/listing style/.store in=\tikzCode@listingStyle,
		/tikzCode/no break/.store in=\tikzCode@noBreak,
		/tikzCode/code body/.style={/tikzCode/defaults/code body},
		/tikzCode/code title body/.style={/tikzCode/defaults/code title body},
		/tikzCode/code title outline/.style={/tikzCode/defaults/code title outline},
		/tikzCode/code footer/.style={/tikzCode/defaults/code footer},
	}
}

% When called, calcPageFree figures out how much free space is
% remaining on the page and stores that value in the variable
% pageFree
\newcommand\tikzCode@calcPageFree{%
	% We insert an empty vbox and execute a paragraph break. Why? 
	% Because if the page happens to be completely empty, calcPageFree 
	% will return a ridiculous value- like 16000pt. The vbox makes the page 
	% non-empty.
	\vbox{}%
	\par%
	\pagebreak[1]%
	% pagegoal is a global variable that stores the current "maximum size" 
	% for this page. When the length of the page content reaches the value of 
	% pagegoal, a pagebreak will be forced.
	\setlength\tikzCode@pageFree{\pagegoal}%
	% pagetotal is another global variable that stores how much of the page
	% has been filled up. The difference between pagegoal and pagetotal
	% is the amount of free space remaining on the page.
	\addtolength\tikzCode@pageFree{-\pagetotal}%
}

\newcommand\tikzCode@beginOutputCapture{%
	% This macro redirects output to the temp file. Everything
	% is saved *verbatim*- hence the inclusion of the 
	% verbatim package.
	%
	% We are about to overwrite some core macros from the
	% verbatim package. Therefore, we begin a new group
	% when we end this group the overwritten macros will
	% revert to their original functionality.
	\begingroup 
	% As far as I can tell, invoking the @bsphack macro puts
	% us in "stealth mode". That is, it's an extra safeguard to
	% make sure nothing related to the commands following it
	% slips out into the text of the document.
	\@bsphack 
	% Open the temp file for output.
	\immediate\openout\tikzCode@tempFile\jobname.lst 
	% Some voodoo that has to do with end-of-line characters,
	% no real idea what this does, actually.
	\let\do\@makeother\dospecials\catcode`\^^M\active 
	% Here we overwrite the verbatim macro that is triggered
	% to handle each line of input.
	\def\verbatim@processline{% 
		% The macro now pipes it's input to our temp file.
		\immediate\write\tikzCode@tempFile{\the\verbatim@line}
	}%
	% Here we hand over control of text processing to the
	% verbatim package. 
	\verbatim@start
}

\newcommand{\tikzCode@suspendOutputCapture}{%
	% Close the temporary file.
	\immediate\closeout\tikzCode@tempFile
	% Undoes whatever @bsphack does.
	\@esphack 
	% Allow overwritten verbatim macros to return to normal.
	\endgroup
}

\newcommand{\tikzCode@processCodeHeap}{%
	% Here we loop through the code heap, split it's output
	% into page-sized chunks and write them out.
	% Flip our "start of input" flag to true and our
	% "end of input" flag to false.
	\tikzCode@heapStarttrue%
	\tikzCode@heapEndfalse%
	\loop
		% Figure out how much free space we have.
		\tikzCode@calcPageFree
		% Initiate a new page if we are within 8 lines of using
		% this page up. This prevents ridiculous output such
		% as code chunks displaying 2 lines. If we make a new
		% page, we will also need to recalculate the space available.
		\ifdim\tikzCode@pageFree < 8\baselineskip
			\newpage
			\tikzCode@calcPageFree
		\fi		
		% If the amount of text in the codeHeap is less than
		% the free space we have left in the page, we transfer
		% it all to the codeChunk. Since this chunk will be the last
		% one printed, set the value of heapStop to true.
		\ifdim\ht\tikzCode@codeHeap < \tikzCode@pageFree	
			\tikzCode@heapEndtrue%	
			\setbox\tikzCode@codeChunk =% 
				\vsplit\tikzCode@codeHeap to \ht\tikzCode@codeHeap
		\else
			% The codeHeap contains more output than will fit
			% on the current page. First, we call adjPageFree
			% which shrinks pageFree so we don't trigger any
			% automatic page breaks. Then we fill the codeChunk 
			% with an amount of output equal to pageFree.
			\tikzCode@adjPageFree
			\setbox\tikzCode@codeChunk =% 
				\vsplit\tikzCode@codeHeap to \tikzCode@pageFree				
		\fi		
		\tikzCode@processCodeChunk		
		% Set the start of input flag to false
		\tikzCode@heapStartfalse
		% If there is output left in the codeHeap, we repeat this loop.
		\ifdim\ht\tikzCode@codeHeap > 0pt
			\repeat
}

\newcommand{\tikzCode@adjPageFree}{%
	\addtolength\tikzCode@pageFree{-3\baselineskip}%
	% Take an extra two lines if we are printing a header.
	% Really... we need to calculate the header height and
	% gobble that- but this works for now.
	\ifnum 0\iftikzCode@heapStart \else 1\fi% 
		\ifx \tikzCode@codeNodeTitle \undefined 1\else \fi=0 %
		\addtolength\tikzCode@pageFree{-2\baselineskip}%
	\fi%
	% The same sort of test won't work for the footer unfortunately...
	% But it will only break in a special case- when a short code
	% chunk fills the exact bottom of a page and then a footer is added.
}

\newcommand{\tikzCode@processCodeChunk}{%
	% Generate output from the current code chunk.
	\begin{tikzpicture}
	
		\node[/tikzCode/code body] (code node body) {
		
			% Dump the contents of the codeChunk
			\usebox{\tikzCode@codeChunk}
		
		};
		
		% Print title component, only if provided and we are processing
		% the first code chunk. This little sucker is basically the TeX version
		% of:
		%
		%     if( heapStart == true and is.defined(codeNodeTitle) ) then
		%
		% First line checks to see if heapStart is true. If it is false, a 1 gets added.
		% Second line checks to see if codeNodeTitle is defined. If it is not, a
		% 1 gets added. If 0 still equals 0 (i.e. no ones were added) by the end of 
		% the ifnum containing these two tests, the main body of code is executed.
		\ifnum 0\iftikzCode@heapStart \else 1\fi% 
			\ifx \tikzCode@codeNodeTitle \undefined 1\else \fi=0 %The extra space is important.
		
			% Code to be executed starts here.
			\node[/tikzCode/code title body] (code node title) {
		 		\tikzCode@codeNodeTitle
			};
			
			\draw[/tikzCode/code title outline] (code node title.south west) --
				(code node title.south east) [rounded corners] --
				(code node title.north east) --
				(code node title.north west) [sharp corners] --
				cycle;
		
		\fi
		
		
		% Print footer component, if this is the last chunk and it is requested.
		\ifnum 0\iftikzCode@heapEnd \else 1\fi% 
			\ifx \tikzCode@codeNodeFooter \undefined 1\else \fi=0 %
			
			\node[/tikzCode/code footer] at (code node body.south) {
				\tikzCode@codeNodeFooter
			};
			
		\fi
	
	\end{tikzpicture}
}

%--------------------- End Internal Package Macros -----------------------

% Default Code Node Style definitions.
\tikzset{
	/tikzCode/defaults/code body/.style={
		% The code node is a homebrewed shape- several things can
		% possibly go pear shaped with it- for example, adding rounded
		% corners causes things to go whacky. Also- don't use the fill
		% command :P
		shape = code node,
		draw = blue!50,
		thick, 
		codebody color = blue!10,
		inner sep = 1ex,
		outer sep = 0pt,
		text width =\textwidth
	},
	/tikzCode/defaults/code title body/.style={
		fill = white,
		inner sep = 1ex,
		outer sep = 0pt,
		above = -1ex of code node body.north west,
		anchor = south west
	},
	/tikzCode/defaults/code title outline/.style={
		draw = blue!50,
		thick
	},
	/tikzCode/defaults/code footer/.style={
		draw = blue!50,
		thick,
		rounded corners,
		fill = white,
		inner sep = 1ex,
		outer sep = 0pt,
	}
}

%===============================================

%--------------------- Begin User-Level Environments ------------------

\newenvironment{tikzCodeBlock}[1][]{%
	% Process environment options.
	\tikzCode@setupKeys
	% Shift the key directory to our namespace.
	\pgfkeys{ /tikzCode/.cd, #1 }
	% Pipe all environment contents to the
	% temp file.
	\tikzCode@beginOutputCapture%
}%
{%
	\tikzCode@suspendOutputCapture
	
	% This odd roundabout method to setting the page break
	% conditional is here because I don't feel like hacking
	% Sweave any more at this time.
	\ifx \tikzCode@noBreak \tikzCode@true
		\tikzCode@breakPagesfalse
	\fi
		
	% If we are breaking pages, load the contents 
	% of the temp file into the codeHeap via the 
	% listings package.
	\iftikzCode@breakPages
		
		\setbox\tikzCode@codeHeap = \vbox{
			\ifx \tikzCode@listingStyle \undefined
				\lstinputlisting{\jobname.lst}
			\else
				\lstinputlisting[style=\tikzCode@listingStyle]{\jobname.lst}
			\fi
		}
		% Process the codeHeap
		\tikzCode@processCodeHeap	
		
	\else
		% We are not breaking pages, load the contents
		% directly into the code chunk and process it.
		\setbox\tikzCode@codeChunk = \vbox{
			\ifx \tikzCode@listingStyle \undefined
				\lstinputlisting{\jobname.lst}
			\else
				\lstinputlisting[style=\tikzCode@listingStyle]{\jobname.lst}
			\fi
		}
		% Enable header and footer printing.
		\tikzCode@heapStarttrue
		\tikzCode@heapEndtrue
		
		% Output the code chunk
		\tikzCode@processCodeChunk
		
	\fi
}


%--------------------- End User-Level Environments --------------------

%--------------------- Begin User-Level Commands  --------------------

\newcommand{\tikzCodeInput}[2][]{%
	% Process command options.
	\tikzCode@setupKeys
	% Shift the key directory to our namespace.
	\pgfkeys{ /tikzCode/.cd, #1 }
	
	% This odd roundabout method to setting the page break
	% conditional is here because I don't feel like hacking
	% Sweave any more at this time.
	\ifx \tikzCode@noBreak \tikzCode@true
		\tikzCode@breakPagesfalse
	\fi
	
	% If we are breaking pages, load the contents 
	% of the temp file into the codeHeap via the 
	% listings package.
	\iftikzCode@breakPages
		
		\setbox\tikzCode@codeHeap = \vbox{
			\ifx \tikzCode@listingStyle \undefined
				\lstinputlisting{#2}
			\else
				\lstinputlisting[style=\tikzCode@listingStyle]{#2}
			\fi
		}
		% Process the codeHeap
		\tikzCode@processCodeHeap	
		
	\else
		% We are not breaking pages, load the contents
		% directly into the code chunk and process it.
		\setbox\tikzCode@codeChunk = \vbox{
			\ifx \tikzCode@listingStyle \undefined
				\lstinputlisting{#2}
			\else
				\lstinputlisting[style=\tikzCode@listingStyle]{#2}
			\fi
		}
		% Enable header and footer printing.
		\tikzCode@heapStarttrue
		\tikzCode@heapEndtrue
		
		% Output the code chunk
		\tikzCode@processCodeChunk
		
	\fi
}


%--------------------- End User-Level Commands -----------------------

%===============================================
% Make sure LaTeX knows we're done here.
\endinput