\name{tikzDevice-package}
\alias{tikzDevice-package}
\alias{tikzDevice}
\docType{package}

\title{Support for native LaTeX output of R graphics}


\details{

  \tabular{ll}{
    Package: \tab tikzDevice\cr
    Type: \tab Package\cr
    Version: \tab 0.6.1\cr
    Date: \tab 2011-04-14\cr
    License: \tab GPL 3.0 or greater\cr
    LazyLoad: \tab yes\cr
  }
}


\description{

  The tikzDevice package implements the \code{\link{tikz}} ouput device which
  generates R graphics in a LaTeX friendly format. LaTeX handles the
  typesetting of all text in graphics generated by \code{tikz}. This allows for
  seamless integration between these graphics and documents that are also being
  typeset by LaTeX. Using LaTeX to generate graph text also means that
  \strong{LaTeX mathematics can be typeset directly into labels and
  annotations}

}


\section{Options That Affect Package Behavior}{
  The \pkg{tikzDevice} package is currently influenced by a number of global
  options that may be set in \R{} scripts, from the \R{} console or in a
  \code{.Rprofile} file. All of the options can be set by using
  \code{options(<option> = <value>)}.  These options allow for the use of
  custom \code{documentclass} declarations, LaTeX packages, and typesetting
  engines (e.g. XeLaTeX or LuaTeX). The defaults , if are any for a given
  option, are shown below the description. The global options are:

  \describe{

    \item{\code{tikzDefaultEngine}}{
      Specifies which typesetting engine functions in the tikzDevice package
      will prefer. Current possible values are \code{pdftex} or \code{xetex}
      which will respectively trigger the use of the \code{pdflatex} and
      \code{xelatex} compilers.
    }

    \item{\code{tikzLatex}}{
      Specifies the location of the LaTeX compiler to be used by
      \pkg{tikzDevice}. Setting this option may help the package locate a
      missing compiler. The default is searched for when the package is loaded,
      otherwise it can be set manually. This option may be set as follows:
      \code{options( tikzLatex = '/path/to/latex/compiler' )}.
    }

    \item{\code{tikzXelatex}}{
      Functions similar to \code{tikzLatex}, except this option specifies the
      location of the XeLaTeX compiler.
    }

    \item{\code{tikzMetricsDictionary}}{
      When using the graphics device provided by \pkg{tikzDevice}, you may
      notice that \R{} appears to ``lag" or ``hang" when commands such as
      \code{plot()} are executed. This is because the device must query the
      LaTeX compiler for string widths and font metrics. For a normal plot,
      this may happen dozens or hundreds of times- hence \R{} becomes
      unresponsive for a while. The good news is that the \code{\link{tikz}} code is
      designed to cache the results of these computations so they need only be
      performed once for each string or character. By default, these values are
      stored in a temporary cache file which is deleted when \R{} is shut down.
      A location for a permanent cache file may be specified by setting the
      value of \code{tikzMetricsDictionary} in \code{.Rprofile} with
      \code{options(tikzMetricsDictionary = '/path/to/dictionary/location')}.
    }

    \item{\code{tikzDocumentDeclaration}}{
      A string. The LaTeX documentclass declaration used in output files when
      \code{standAlone == TRUE}. \code{tikzDocumentDeclaration} also influences
      the calculation of font metrics. The default value is:

      \preformatted{
        options(tikzDocumentDeclaration = "\\\\documentclass[10pt]{article}")
      }
    }

    \item{\code{tikzLatexPackages}}{
      A character vector. These are the packages which are included when using
      the \code{pdftex} engine and \code{\link{tikz}} is used with the the
      \code{standAlone} option as well as when font metrics are calculated.
    }

    \item{\code{tikzXelatexPackages}}{
      This option works like \code{tikzLatexPackages}, except is is used when
      the \code{xetex} engine is in use.
    }

    \item{\code{tikzFooter}}{
      A character vector. The footer to be used only when
      \code{standAlone==TRUE}.
    }

    \item{\code{tikzMetricPackages}}{
      A character vector. These are the packages which are additionally loaded
      when doing font metric calculations.  As you see below, the font encoding
      is set to Type 1. This is very important so that character codes of LaTeX
      and \R{} match up. The default value is:

      \preformatted{
        options(tikzMetricPackages = c(
          "\\\\usepackage[utf8]{inputenc}",
          "\\\\usepackage[T1]{fontenc}",
          "\\\\usetikzlibrary{calc}"
        ))
      }
    }

    \item{\code{tikzUnicodeMetricPackages}}{
      This vector is used when font metric calculations are performed using the
      \code{xetex} engine. It should have the same contents as
      \code{tikzMetricPackages} with the addition of the \code{fontspec} and
      \code{xunicode} packages.
    }

    \item{\code{tikzSanitizeCharacters}}{
      A character vector of special latex characters to replace. These values
      should correspond to the replacement values from the
      \code{tikzReplacementCharacters} option. See
      \code{\link{sanitizeTexString}} for more details.
    }

    \item{\code{tikzReplacementCharacters}}{
      A character vector of replacements for special latex characters. These
      values should correspond to the values from the
      \code{tikzSanitizeCharacters} option.
    }

    \item{\code{tikzRasterResolution}}{
      When \code{\link{tikz}} is requested to add a raster to a graphic, the
      raster is written to a PNG file which is then included into the LaTeX
      code. This option controls the resolution (dpi) at which the PNG files
      are created.
    }

    \item{\code{tikzPdftexWarnUTF}}{
      A \code{TRUE/FALSE} value that controls whether warnings are printed if
      Unicode characters are sent to a device using the \code{pdftex} engine.
    }
  }

  Default values for all options may be viewed or restored using the
  \code{\link{setTikzDefaults}} function.
}


\section{Font Size Calculations}{
  The overarching goal of the \code{tikzDevice} is to provide seamless
  integration between text in \R{} graphics and the text of LaTeX documents
  that contain those graphics. In order to achieve this integration the device
  must translate font sizes specified in \R{} to corresponding font sizes in
  LaTeX.

  A major consideration is that font sizes in LaTeX are controlled by a ``base
  font size'' that is specified at the beginning of the document; typically
  10pt.  Furthermore, LaTeX typically provides only a finite number of sizes
  for each font. Fortunately, the TikZ graphics system allows text to be
  resized using a scaling factor. The \code{tikzDevice} calculates this
  scaling factor using three inputs:

  \itemize{

    \item The ``base font size'' specified when the graphics device is created.

    \item The ``character expansion factor'' parameter, specified using the
    \code{cex} argument to functions such as \code{\link{par}}.

    \item The ``font size'' parameter, specified using the \code{ps} argument
    to functions such as \code{\link{par}} or the \code{fontsize} argument to
    functions such as \code{\link{gpar}}.

  }

  The tricky bit is the specification of the ``base font size''.  By default
  the \code{tikzDevice} will attempt to determine this parameter by scaning the
  value of \code{options( "tikzDocumentDeclaration" )} using the regular
  expression \code{\\d+[pt]}.  For the default header of:

  \preformatted{
    \documentclass[10pt]{article}
  }

  This regular expression will return 10 as the base pointsize to be used by the
  device.  If the regular expression fails to produce a match, the value of the
  \code{pointsize} argument to the \code{\link{tikz}} function will be used.
}


\section{Unicode}{
  Using tikzDevice functions on strings containing Unicode (multibyte)
  characters requires special consideration. The primary reason for this is
  that \code{pdftex}, the typesetting engine most commonly used to compile
  LaTeX documents, has no native support for Unicode. Recently, two new engines
  have become widely available that do support Unicode natively. These engines
  are:

  \itemize{

    \item The \code{xetex} engine which has been a part of standard TeX
    distributions since TeX Live 2007 and MiKTeX 2.7.

    \item The \code{luatex} engine which is a direct sucessor to \code{pdftex}.
    LuaTeX is still considered `beta' software (as of spring 2011) but has been
    included in standard TeX distributions since TeX Live 2008 and MiKTeX 2.9.

  }

  As of Version 0.6.0, the tikzDevice package includes support for the
  \code{xetex} engine provided a recent version of TeX Live or MiKTeX is
  available.

  The tikzDevice defaults to using the \code{pdftex} engine, but this may be
  changed by setting an option: \code{option(tikzDefaultEngine = 'xetex')}.
  When working with text that contains Unicode characters, we strongly
  reccomend switching to the \code{xetex} engine and the package will produce
  warning messages when multibyte characters are sent to the \code{pdftex}
  engine. Users who find these warnings annoying may disable them by setting
  \code{options(tikzPdftexWarnUTF = FALSE)} as it is possible to send Unicode
  information to the \code{pdftex} engine with the following caveats:

  \itemize{

    \item The task of determining the proper mix of LaTeX packages required to
    supply glyphs for Unicode characters is left entirely up to the user.
    \code{options(tikzLatexPackages)} may need to be customized in order to get
    proper behavior.

    \item The \code{\link{getLatexCharMetrics}} function will always return 0
    for ascent, descent and width when passed a character code outside the
    range 32--127 when using the \code{pdftex} engine.
  }

  When using the \code{xetex} engine, Unicode support is enabled by loading the
  LaTeX packages \code{fontspec} and \code{xunicode}. Using this setup, support
  for Unicode characters should be limited only by the fonts used in the
  document. The font selection may be adjusted using
  \code{options(tikzXelatexPackages)}.
}

\author{
  Cameron Bracken: \email{cameron.bracken@gmail.com}

  Charlie Sharpsteen: \email{source@sharpsteen.net}

  Submit bug reports to: \email{tikzdevice-bugs@lists.r-forge.r-project.org}
}


\references{
The TikZ and PGF Packages: Manual for version 2.00\cr
\url{http://sourceforge.net/projects/pgf}\cr
Till Tanatu, February 20, 2008
}

\keyword{ package }
\seealso{
\code{\link{tikz}}
}

